==============================
 Testing 'BaseGeometry' Class
==============================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator(None, 3)

>>> bg.integer_validator("g", None)
Traceback (most recent call last):
TypeError: g must be an integer

>>> bg.integer_validator("", 3)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
ValueError: distance must be greater than 0

>>> bg.integer_validator("distance")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("wish", [3])
Traceback (most recent call last):
TypeError: wish must be an integer

>>> bg. integer_validator("hg", True)
Traceback (most recent call last):
TypeError: hg must be an integer

>>> bg.integer_validator("wish", {6, 7})
Traceback (most recent call last):
TypeError: wish must be an integer

>>> bg.integer_validator("z", {6,})
Traceback (most recent call last):
TypeError: z must be an integer

>>> bg.integer_validator("z", '6')
Traceback (most recent call last):
TypeError: z must be an integer

>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at 0x...>
