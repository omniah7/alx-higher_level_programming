====================================
 Testing 'matrix_divided' Function
====================================

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = []
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix = [[], []]
>>> matrix_divided(matrix, 3)
[[], []]

>>> matrix = [
...  [1, 2, 3],
...  [4, 5, 6]
...  ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> matrix_divided(matrix, -3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

>>> matrix_divided(matrix, float('nan'))
[[nan, nan, nan], [nan, nan, nan]]

>>> matrix_divided(matrix, '2')
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided(matrix, int('w'))
Traceback (most recent call last):
...
ValueError: invalid literal for int() with base 10: 'w'

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> matrix = [
... [1, 2.7, 3.6],
... [4, 5.435, 6]
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 0.9, 1.2], [1.33, 1.81, 2.0]]

>>> matrix = [
... [1, 6, 3.6],
... [4, '65', 6]
... ]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
... [1, 236, 3.6],
... [4, -3, 6]
... ]
>>> matrix_divided(matrix, 3)
[[0.33, 78.67, 1.2], [1.33, -1.0, 2.0]]
