================================
 Testing 'matrix_mul' Function
 ===============================

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul(654, [4, 5])
Traceback (most recent call last):
...
TypeError: m_a must be a list

>>> matrix_mul([4, 5], 'list')
Traceback (most recent call last):
...
TypeError: m_b must be a list

>>> matrix_mul([[4, 5]], [4, 6, 8])
Traceback (most recent call last):
...
TypeError: m_b must be a list of lists

>>> matrix_mul([1, 2, 3], [[2, 1], [7, 5]])
Traceback (most recent call last):
...
TypeError: m_a must be a list of lists

>>> matrix_mul([], [[2, 1], [7, 5]])
Traceback (most recent call last):
...
ValueError: m_a can't be empty

>>> matrix_mul([[2, 1], [7, 5]], [])
Traceback (most recent call last):
...
ValueError: m_b can't be empty

>>> matrix_mul([[2.3, 21], ['3', 'd']], [[2, 1], [7, 5]])
Traceback (most recent call last):
...
TypeError: m_a should contain only integers or floats

>>> matrix_mul([[2, 1], [7, 5]], [[2.3, 21], ['3', 'd']])
Traceback (most recent call last):
...
TypeError: m_b should contain only integers or floats

>>> matrix_mul([[2, 1], [7, 5, 7]], [[2.3, 21], [3, 4]])
Traceback (most recent call last):
...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[2.3, 21], [3, 4]], [[2, 1], [7, 5, 8]])
Traceback (most recent call last):
...
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[2.3], [4]], [[2, 1], [5, 7]])
Traceback (most recent call last):
...
ValueError: m_a and m_b can't be multiplied

